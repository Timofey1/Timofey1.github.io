[{"authors":null,"categories":null,"content":"Timofey Beshkurov works as a Data Scientist at Ashmanov Neural Networks in the Computer Vision Department. Studying in Peoples’ Friendship University of Russia on fundamental computer science and information technology. His research interests include data analysis and processing, various tasks in the field of imaging and programming.\n Download my resumé. --\r","date":1653751133,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1653751133,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Timofey Beshkurov works as a Data Scientist at Ashmanov Neural Networks in the Computer Vision Department. Studying in Peoples’ Friendship University of Russia on fundamental computer science and information technology. His research interests include data analysis and processing, various tasks in the field of imaging and programming.","tags":null,"title":"Timofey Beshkurov","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://example.com/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Timofey Beshkurov"],"categories":[],"content":"1. Python  As discussed previously, Python has the highest popularity among data scientists. This is due to its wide range of uses. It is often the go-to choice for a range of tasks for domains, such as, machine learning, deep learning, artificial intelligence and other popular forms of technology. These tasks are made easier due to Python’s powerful data science libraries. Some of the more popular libraries include Keras, Scikit-Learn, matplotlib, and tensorflow.\nPython can also support very important tasks, such as data collection, analysis, modeling, and visualisation which are all key factors to work with in big data.\nYou will never be left without an answer when using Python. This language has a large community for support which is another reason it holds a vital place among the top tools for data science.\nBest used for: Python is best used for automation. Automating tasks is extremely valuable in data science and will ultimately save you a lot of time, and provide valuable data.\nPros/Cons: The biggest pro of Python is it’s popularity among data scientists. This wide popularity means that there is endless support and a lot of resources available to continue your education. It’s wide range of open source tools for visualization and machine learning also make Python extremely useful and popular.\nThere are very few cons to Python, but the biggest complaint among users is it’s speed. Python is relatively slow for computation in comparison to other languages.\nFurther reading: R vs. Python — Which One Should You Learn?\n2. JavaScript  JavaScript is the most popular programming language to learn. It is most commonly used for web development due its capability of building rich and interactive web pages. That being said, it also finds a home in the data science world. JavaScript is an amazing choice for creating visualizations, which is an excellent way to convey big data. While JavaScript is a great language to learn, it is more of an aid in data science than a primary data science language. We still highly recommend learning JavaScript along with other languages you may learn, due to its popularity and versatility.\nBest used for: JavaScript is best used for web development.\nPros/Cons: JavaScript is amazing when it comes to creating visualizations, which can be very helpful when working with big data.\nUnfortunately, JavaScript just doesn’t have the range of data science packages, and built in functionality compared to some of the more popular data science languages.\n3. Java  Java, which is sometimes referred to as \u0026#34;Write Once, Run anywhere\u0026#34; is a programming language that has been used by top businesses for secure enterprise development and is now being used for tasks involving data analysis, data mining, and machine learning. It has a powerful ability to build complex applications from scratch, and is capable of delivering results much faster than other languages.\nMany people believe that Java is a language for beginners, but that could not be farther from the truth. Java is very powerful and is used for many complicated tasks involving data analysis, deep learning, natural language processing, and data mining.\nJava is a little different than most languages due to its true garbage collection. Most languages delete themselves upon execution, and Java’s use of a true garbage collection makes it far more efficient.\nBest used for: Java is best used for creating complete applications. It makes building mobile or desktop applications incredibly easy.\nPros/Cons: Java is a very fast language in comparison to its competitors, which helps to build more maintainable and scalable software. It also is easily portable due to it’s “Write once, Run anywhere” function. Java also has a true garbage collection which creates a huge advantage over other languages.\nJava is a more disciplined language, so it is not as flexible and friendly as some other languages. In comparison, Python syntax is very concise and easily readable. Java devs are a little more rare, meaning the networking opportunities and support are less easy to come by.\n4. R  R is quickly rising the ranks as one of the most popular programming languages for data science, and for good reason. R is a highly extensible and easy to learn language that fosters an environment for statistical computing and graphics. All of this makes R an ideal choice for data science, big data, and machine learning.\nR is a powerful scripting language. This being so, means that R can handle large and complex data sets. This combined with it’s ever growing community makes it a top tier option for an aspiring data scientist.\nBest used for: R is best used in the world of data science. It is especially powerful when performing statistical operations.\nPros/Cons: R has numerous pros including being open-source, large amount of support, multiple packages, quality plotting and graphing as well as various machine learning operations.\nThe biggest downside of using R is security. R lacks basic security …","date":1653751133,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653751133,"objectID":"511d5c67499fddebf44962bb3a495b08","permalink":"https://example.com/post/spl/","publishdate":"2022-05-28T18:18:53+03:00","relpermalink":"/post/spl/","section":"post","summary":"Overview of scientific programming languages","tags":[],"title":"Scientific programming languages","type":"post"},{"authors":["Timofey Beshkurov"],"categories":[],"content":"News    First of all, I worked, I was engaged in the development of detecting cheaters on EGE exam.\n  I studied, namely, I did a lot of laboratory work for the future.\n  My review of the week  I think the week has been quite productive. I did all homework not only for this week, but also for the next week. I got a lot of free time and spend it with benefit for me.\n","date":1653750976,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653750976,"objectID":"310f35692fadaf4848c892b862344942","permalink":"https://example.com/post/week232805/","publishdate":"2022-05-28T18:16:16+03:00","relpermalink":"/post/week232805/","section":"post","summary":"Week summary","tags":[],"title":"Week 23.05 - 28.05","type":"post"},{"authors":["Timofey Beshkurov"],"categories":["cv"],"content":"Clone this repo : Face Recognition demo github page\nFace Recognition Demo uses  facenet(trained on vggface2 dataset) MTCNN face detector mongoDB for storing facial embeddings spotify annoy for indexing faces and finding simular faces Flask framework + Flask-RESTful for REST API  Installation and startup pip install -r requirements.txt  Run python app.py  or flask run  Options - Detector only - Compare two loaded faces - Add/Find face in DataBase (install mongoDB first) ","date":1653750509,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653750509,"objectID":"dd81e60e07e512e61051f226e3533751","permalink":"https://example.com/project/face-recognition/","publishdate":"2022-05-28T18:08:29+03:00","relpermalink":"/project/face-recognition/","section":"project","summary":"Face Recognition using mtcnn detection and facenet model","tags":["face recognition"],"title":"Face Recognition","type":"project"},{"authors":["Timofey Beshkurov"],"categories":[],"content":"1. Create an easy-to-follow structure  When it comes to what you have to say, break it down into three simple sections: your presentation needs an introduction, body, and conclusion.\n  A compelling introduction. Your introduction needs to briefly sum up what you’re going to talk about and why it’s useful or relevant to your audience.\n  Offer a body of evidence. The body of your presentation is where you hit ’em with the facts, quotes, and evidence to back up your main points.\n  Sum up with key takeaways. The conclusion is where you loop back to your original statement and give the audience some key takeaways on how they can put into practice what they’ve learned.\n  No more than 10 slides in total. Who wants to sit through pages and pages of slides? No one, that’s who. By keeping your slide deck to 10 slides, even if your presentation is 30 minutes long, you’ll give the audience a chance to digest the on-screen messages in line with your talk. Using concept maps before structuring your slides can help keep to the point.\n  2. Limit the amount of copy on each slide  Less really is more, especially when it comes to making a good presentation. Too much text and the audience will just be reading the screen instead of looking at you and feeling the emotional impact of your message.\n  No more than six words per slide. Marketing king Seth Godin says we should have just six words per slide – that’s not a lot of copy. Choose your words carefully and rewrite until you’ve got it just right.\n  Think ‘bite-size’ information. We called ourselves Biteable a reason: studies have shown that information is retained better when it’s broken down into bite-sized chunks. Video is a great way to learn and research suggests it’s 95% more compelling than text.\n  3. Be savvy with design details  A good design can make or break a presentation. If you haven’t got the budget for a designer, presentation tools such as Visme or Canva will help you make great slides, and Pexels or Unsplash offer stunning royalty-free images.\n  Use color sparingly. Bright colors can dazzle, but too many can be offputting. Use the colors most relevant to your message. We’d recommend sticking with one or two (not counting black and white) for your palette so it has a consistent look and feel.\n  Be consistent with your font. Consistent design makes you look more professional. Don’t switch between caps and lower case, Times New Roman and Comic Sans, or 8 and 30 point text size. Stick with one font and one size throughout. You can vary the emphasis with your words later, but keep your on-screen text uniform for a more cohesive message.\n  Format for perfection. A wonky line on a slide or a badly pixelated graphic will put some people off, as it will look like you haven’t tried very hard (or worse, that you just aren’t very good). Make sure your text is aligned and neat like in the example below.\n  4. Polish several times  Just like some well-worn shoes, a good presentation often needs a few rounds of dusting before it’s all shiny and sparkly.\n  Start Messy. Don’t be afraid to start messy. Using a non-linear writing tool like Milanote allows you to explore and outline your initial ideas in a flexible way before you even open up Powerpoint or Keynote. Arrange your ideas side-by-side and discover new connections that you didn’t see before.\n  Edit ruthlessly. At first you might have a huge amount of information and will wonder how you’re ever going get it down to six words per slide. That’s OK. Keep editing ruthlessly until you’ve pared your message down to the bare essentials.\n  Get someone else to look at it. A fresh pair of eyes can work miracles when it comes to refining your presentation. Get a trusted mentor or colleague to review your work. If you don’t know anyone who can help, an online writing assistant like ProWritingAid or Grammarly can help you weed out a lot of problems.\n  ","date":1652617761,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652617761,"objectID":"214c5924b1b133f59de9102689098968","permalink":"https://example.com/post/presentation/","publishdate":"2022-05-15T15:29:21+03:00","relpermalink":"/post/presentation/","section":"post","summary":"1. Create an easy-to-follow structure  When it comes to what you have to say, break it down into three simple sections: your presentation needs an introduction, body, and conclusion.","tags":[],"title":"Presentation","type":"post"},{"authors":["Timofey Beshkurov"],"categories":[],"content":"News   Repaired the roof on the cottage. Studied. Started working on a new project at work.  My review of the week  It was awesome.\n","date":1652617431,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652617431,"objectID":"328600ab82d47f04d5e7a5bbdc4323eb","permalink":"https://example.com/post/091505/","publishdate":"2022-05-15T15:23:51+03:00","relpermalink":"/post/091505/","section":"post","summary":"Latest news","tags":[],"title":"Week 09.05-15.05","type":"post"},{"authors":["Timofey Beshkurov"],"categories":[],"content":"Overview  LaTeX is a software system for document preparation. When writing, the writer uses plain text as opposed to the formatted text found in “What You See Is What You Get” word processors like Microsoft Word, LibreOffice Writer and Apple Pages. The writer uses markup tagging conventions to define the general structure of a document to stylise text throughout a document (such as bold and italics), and to add citations and cross-references. A TeX distribution such as TeX Live or MiKTeX is used to produce an output file (such as PDF or DVI) suitable for printing or digital distribution.\nLaTeX is widely used in academiafor the communication and publication of scientific documents in many fields, including mathematics, computer science, engineering, physics, chemistry, economics, linguistics, quantitative psychology, philosophy, and political science. It also has a prominent role in the preparation and publication of books and articles that contain complex multilingual materials, such as Sanskrit and Greek. LaTeX uses the TeX typesetting program for formatting its output, and is itself written in the TeX macro language.\nLaTeX can be used as a standalone document preparation system, or as an intermediate format. In the latter role, for example, it is sometimes used as part of a pipeline for translating DocBook and other XML-based formats to PDF. The typesetting system offers programmable desktop publishing features and extensive facilities for automating most aspects of typesetting and desktop publishing, including numbering and cross-referencing of tables and figures, chapter and section headings, the inclusion of graphics, page layout, indexing and bibliographies.\nLike TeX, LaTeX started as a writing tool for mathematicians and computer scientists, but even from early in its development, it has also been taken up by scholars who needed to write documents that include complex math expressions or non-Latin scripts,such as Arabic, Devanagari and Chinese.\nLaTeX is intended to provide a high-level, descriptive markup language that accesses the power of TeX in an easier way for writers. In essence, TeX handles the layout side, while LaTeX handles the content side for document processing. LaTeX comprises a collection of TeX macros and a program to process LaTeX documents, and because the plain TeX formatting commands are elementary, it provides authors with ready-made commands for formatting and layout requirements such as chapter headings, footnotes, cross-references and bibliographies.\nLaTeX was originally written in the early 1980s by Leslie Lamport at SRI International. The current version is LaTeX2e (stylised as LATEX2ε), released in 1994, but updated in 2020. LaTeX3 (LATEX3) has been under long-term development since the early 1990s. LaTeX is free software and is distributed under the LaTeX Project Public License (LPPL).\nTypesetting system  LaTeX attempts to follow the design philosophy of separating presentation from content, so that authors can focus on the content of what they are writing without attending simultaneously to its visual appearance. In preparing a LaTeX document, the author specifies the logical structure using simple, familiar concepts such as chapter, section, table, figure, etc., and lets the LaTeX system handle the formatting and layout of these structures. As a result, it encourages the separation of the layout from the content — while still allowing manual typesetting adjustments whenever needed. This concept is similar to the mechanism by which many word processors allow styles to be defined globally for an entire document, or the use of Cascading Style Sheets in styling HTML documents.\nThe LaTeX system is a markup language that handles typesetting and rendering, and can be arbitrarily extended by using the underlying macro language to develop custom macros such as new environments and commands. Such macros are often collected into packages, which could then be made available to address some specific typesetting needs such as the formatting of complex mathematical expressions or graphics (e.g., the use of the align environment provided by the amsmath package to produce aligned equations).\nIn order to create a document in LaTeX, you first write a file, say document.tex, using your preferred text editor. Then you give your document.tex file as input to the TeX program (with the LaTeX macros loaded), which prompts TeX to write out a file suitable for onscreen viewing or printing. This write-format-preview cycle is one of the chief ways in which working with LaTeX differs from the What-You-See-Is-What-You-Get (WYSIWYG) style of document editing. It is similar to the code-compile-execute cycle known to computer programmers. Today, many LaTeX-aware editing programs make this cycle a simple matter through the pressing of a single key, while showing the output preview on the screen beside the input window. Some online LaTeX editors even automatically refresh the preview, while other online …","date":1651960738,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651960738,"objectID":"48d1feae5c0ec3689da86c8084f7785c","permalink":"https://example.com/post/latex/","publishdate":"2022-05-08T00:58:58+03:00","relpermalink":"/post/latex/","section":"post","summary":"Software system for document preparation","tags":[],"title":"LaTeX","type":"post"},{"authors":["Timofey Beshkurov"],"categories":[],"content":"News    First of all, I worked, I was engaged in the development of tracking with a low frame rate.\n  I studied, namely, I did a lot of laboratory work for the future.\n  My review of the week  I think the week has been quite productive. I did all homework not only for this week, but also for the next week. I got a lot of free time and spend it with benefit for me.\n","date":1651960183,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651960183,"objectID":"5dad048c8630479baed39524887dca2d","permalink":"https://example.com/post/week020805/","publishdate":"2022-05-08T00:49:43+03:00","relpermalink":"/post/week020805/","section":"post","summary":"Latest news","tags":[],"title":"Week 02.05-08.05","type":"post"},{"authors":["Timofey Beshkurov"],"categories":["Demo"],"content":"Overview \rGit is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).\nGit was originally authored by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development. Since 2005, Junio Hamano has been the core maintainer. As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server. Git is free and open-source software distributed under the GPL-2.0-only license.\nHistory \rGit development began in April 2005, after many developers of the Linux kernel gave up access to BitKeeper, a proprietary source-control management (SCM) system that they had been using to maintain the project since 2002. The copyright holder of BitKeeper, Larry McVoy, had withdrawn free use of the product after claiming that Andrew Tridgell had created SourcePuller by reverse engineering the BitKeeper protocols. The same incident also spurred the creation of another version-control system, Mercurial.\nLinus Torvalds wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs. Torvalds cited an example of a source-control management system needing 30 seconds to apply a patch and update all associated metadata, and noted that this would not scale to the needs of Linux kernel development, where synchronizing with fellow maintainers could require 250 such actions at once. For his design criterion, he specified that patching should take no more than three seconds, and added three more goals:\nTake Concurrent Versions System (CVS) as an example of what not to do; if in doubt, make the exact opposite decision. Support a distributed, BitKeeper-like workflow. Include very strong safeguards against corruption, either accidental or malicious. These criteria eliminated every version-control system in use at the time, so immediately after the 2.6.12-rc2 Linux kernel development release, Torvalds set out to write his own.\nThe development of Git began on 3 April 2005. Torvalds announced the project on 6 April and became self-hosting the next day. The first merge of multiple branches took place on 18 April. Torvalds achieved his performance goals; on 29 April, the nascent Git was benchmarked recording patches to the Linux kernel tree at the rate of 6.7 patches per second.On 16 June, Git managed the kernel 2.6.12 release.\nTorvalds turned over maintenance on 26 July 2005 to Junio Hamano, a major contributor to the project. Hamano was responsible for the 1.0 release on 21 December 2005 and remains the project’s core maintainer.\nDesign \rGit’s design was inspired by BitKeeper and Monotone. Git was originally designed as a low-level version-control system engine, on top of which others could write front ends, such as Cogito or StGIT. The core Git project has since become a complete version-control system that is usable directly. While strongly influenced by BitKeeper, Torvalds deliberately avoided conventional approaches, leading to a unique design.\nImplementations \rGit (the main implementation in C) is primarily developed on Linux, although it also supports most major operating systems, including the BSDs (DragonFly BSD, FreeBSD, NetBSD, and OpenBSD), Solaris, macOS, and Windows.\nThe first Windows port of Git was primarily a Linux-emulation framework that hosts the Linux version. Installing Git under Windows creates a similarly named Program Files directory containing the Mingw-w64 port of the GNU Compiler Collection, Perl 5, MSYS2 (itself a fork of Cygwin, a Unix-like emulation environment for Windows) and various other Windows ports or emulations of Linux utilities and libraries. Currently, native Windows builds of Git are distributed as 32- and 64-bit installers.The git official website currently maintains a build of Git for Windows, still using the MSYS2 environment.\nThe JGit implementation of Git is a pure Java software library, designed to be embedded in any Java application. JGit is used in the Gerrit code-review tool, and in EGit, a Git client for the Eclipse IDE.\nGo-git is an open-source implementation of Git written in pure Go.It is currently used for backing projects as a SQL interface for Git code repositories and providing encryption for Git.\nThe Dulwich implementation of Git is a pure Python software component for Python 2.7, 3.4 and 3.5.\nThe libgit2 implementation of Git is an ANSI C software library with no other dependencies, which can be built on multiple platforms, including Windows, Linux, macOS, and BSD. It has bindings for many programming languages, …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://example.com/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Git is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development.","tags":["Academic"],"title":"Git","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne \rTwo \rThree \r A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://example.com/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Timofey Beshkurov","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://example.com/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]